name: PR Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
      
      - name: Run linting
        run: uv run ruff check .
      
      - name: Run formatting check
        run: uv run black --check .
      
      - name: Run type checking
        run: uv run mypy src

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]  # Run after lint passes
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
      
      - name: Run unit tests with coverage
        run: uv run pytest tests/unit/ --cov=src --cov-report=xml:coverage-unit.xml --cov-report=term -v
      
      - name: Upload unit test coverage to artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-unit
          path: coverage-unit.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]  # Run after lint passes
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
        
      - name: Install sbctl
        run: |
          # Install sbctl binary for integration tests
          mkdir -p /tmp/sbctl && cd /tmp/sbctl
          curl -L -o sbctl.tar.gz "https://github.com/replicatedhq/sbctl/releases/latest/download/sbctl_linux_amd64.tar.gz"
          tar xzf sbctl.tar.gz
          chmod +x sbctl
          sudo mv sbctl /usr/local/bin/
          cd / && rm -rf /tmp/sbctl
          sbctl --help
      
      - name: Run integration tests with coverage
        run: uv run pytest tests/integration/ --cov=src --cov-report=xml:coverage-integration.xml --cov-report=term -v
      
      - name: Upload integration test coverage to artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration
          path: coverage-integration.xml

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests]
    if: always() && needs.lint.result == 'success' && (needs.unit-tests.result == 'success' || needs.integration-tests.result == 'success')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
      
      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-unit
          path: ./
        continue-on-error: true
        
      - name: Download integration test coverage  
        uses: actions/download-artifact@v4
        with:
          name: coverage-integration
          path: ./
        continue-on-error: true
      
      - name: Combine coverage reports
        run: |
          # Install coverage for combining reports
          uv pip install coverage
          
          # Combine coverage data if both files exist
          if [ -f coverage-unit.xml ] && [ -f coverage-integration.xml ]; then
            echo "Combining coverage from unit and integration tests"
            uv run coverage combine || true
            uv run coverage xml -o coverage-combined.xml || true
            
            # Use combined coverage if successful, otherwise use unit coverage
            if [ -f coverage-combined.xml ]; then
              cp coverage-combined.xml coverage.xml
            else
              cp coverage-unit.xml coverage.xml
            fi
          elif [ -f coverage-unit.xml ]; then
            echo "Using unit test coverage only"
            cp coverage-unit.xml coverage.xml
          elif [ -f coverage-integration.xml ]; then
            echo "Using integration test coverage only"  
            cp coverage-integration.xml coverage.xml
          else
            echo "No coverage files found"
            exit 1
          fi
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  container-tests:
    name: Container Tests
    runs-on: ubuntu-latest
    needs: [lint]  # Run after lint passes
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
      
      - name: Install sbctl
        run: |
          mkdir -p /tmp/sbctl && cd /tmp/sbctl
          curl -L -o sbctl.tar.gz "https://github.com/replicatedhq/sbctl/releases/latest/download/sbctl_linux_amd64.tar.gz"
          tar xzf sbctl.tar.gz
          chmod +x sbctl
          sudo mv sbctl /usr/local/bin/
          cd / && rm -rf /tmp/sbctl
          sbctl --help
      
      - name: Check Podman version
        run: podman --version
      
      - name: Install melange and apko
        run: |
          # Install melange and apko for CI environment
          curl -L -o melange "https://github.com/chainguard-dev/melange/releases/latest/download/melange-linux-amd64"
          curl -L -o apko "https://github.com/chainguard-dev/apko/releases/latest/download/apko-linux-amd64"
          chmod +x melange apko
          sudo mv melange /usr/local/bin/
          sudo mv apko /usr/local/bin/
          melange version
          apko version
      
      - name: Set file permissions
        run: |
          chmod +x scripts/build.sh
          chmod +x scripts/run.sh
          chmod +x scripts/run_tests.sh
          chmod +x scripts/setup_env.sh
      
      - name: Verify melange and apko configs exist
        run: |
          if [ ! -f .melange.yaml ]; then
            echo "ERROR: .melange.yaml not found"
            exit 1
          fi
          if [ ! -f apko.yaml ]; then
            echo "ERROR: apko.yaml not found"
            exit 1
          fi
          echo "Configuration files found:"
          ls -la .melange.yaml apko.yaml
      
      - name: Run container tests (melange/apko)
        env:
          MELANGE_TEST_BUILD: "true"
        run: uv run pytest tests/e2e/ -m container -v
  
  e2e-tests:
    name: E2E Tests (Non-Container)
    runs-on: ubuntu-latest
    needs: [lint]  # Run after lint passes
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
      
      - name: Install sbctl
        run: |
          mkdir -p /tmp/sbctl && cd /tmp/sbctl
          curl -L -o sbctl.tar.gz "https://github.com/replicatedhq/sbctl/releases/latest/download/sbctl_linux_amd64.tar.gz"
          tar xzf sbctl.tar.gz
          chmod +x sbctl
          sudo mv sbctl /usr/local/bin/
          cd / && rm -rf /tmp/sbctl
          sbctl --help
      
      - name: Run E2E tests (non-container)
        run: uv run pytest tests/e2e/ -m "e2e and not container" -v