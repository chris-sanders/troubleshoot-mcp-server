name: PR Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
      
      - name: Run linting
        run: uv run ruff check .
      
      - name: Run formatting check
        run: uv run black --check .
      
      - name: Run type checking
        run: uv run mypy src

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
      
      - name: Run unit tests with coverage
        run: uv run pytest tests/unit/ --cov=src --cov-report=xml -v
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
        
      - name: Install sbctl
        run: |
          # Install sbctl binary for integration tests
          mkdir -p /tmp/sbctl && cd /tmp/sbctl
          curl -L -o sbctl.tar.gz "https://github.com/replicatedhq/sbctl/releases/latest/download/sbctl_linux_amd64.tar.gz"
          tar xzf sbctl.tar.gz
          chmod +x sbctl
          sudo mv sbctl /usr/local/bin/
          cd / && rm -rf /tmp/sbctl
          sbctl --help
      
      - name: Run integration tests
        run: uv run pytest tests/integration/ -v

  container-tests:
    name: Container Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]  # Run after basic checks pass
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
      
      - name: Install sbctl
        run: |
          mkdir -p /tmp/sbctl && cd /tmp/sbctl
          curl -L -o sbctl.tar.gz "https://github.com/replicatedhq/sbctl/releases/latest/download/sbctl_linux_amd64.tar.gz"
          tar xzf sbctl.tar.gz
          chmod +x sbctl
          sudo mv sbctl /usr/local/bin/
          cd / && rm -rf /tmp/sbctl
          sbctl --help
      
      - name: Check Podman version
        run: podman --version
      
      - name: Install melange and apko
        run: |
          # Install melange and apko for CI environment
          curl -L -o melange "https://github.com/chainguard-dev/melange/releases/latest/download/melange-linux-amd64"
          curl -L -o apko "https://github.com/chainguard-dev/apko/releases/latest/download/apko-linux-amd64"
          chmod +x melange apko
          sudo mv melange /usr/local/bin/
          sudo mv apko /usr/local/bin/
          melange version
          apko version
      
      - name: Set file permissions
        run: |
          chmod +x scripts/build.sh
          chmod +x scripts/run.sh
          chmod +x scripts/run_tests.sh
          chmod +x scripts/setup_env.sh
      
      - name: Verify melange and apko configs exist
        run: |
          if [ ! -f .melange.yaml ]; then
            echo "ERROR: .melange.yaml not found"
            exit 1
          fi
          if [ ! -f apko.yaml ]; then
            echo "ERROR: apko.yaml not found"
            exit 1
          fi
          echo "Configuration files found:"
          ls -la .melange.yaml apko.yaml
      
      - name: Run container tests (melange/apko)
        run: uv run pytest tests/e2e/ -m container -v
  
  e2e-tests:
    name: E2E Tests (Non-Container)
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]  # Run after basic checks pass
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true
      
      - name: Install UV
        run: |
          pip install uv
          uv --version
      
      - name: Setup environment
        run: |
          # Create virtual environment
          uv venv -p python3.13 .venv
          
          # Install development dependencies
          uv pip install -e ".[dev]"
      
      - name: Install sbctl
        run: |
          mkdir -p /tmp/sbctl && cd /tmp/sbctl
          curl -L -o sbctl.tar.gz "https://github.com/replicatedhq/sbctl/releases/latest/download/sbctl_linux_amd64.tar.gz"
          tar xzf sbctl.tar.gz
          chmod +x sbctl
          sudo mv sbctl /usr/local/bin/
          cd / && rm -rf /tmp/sbctl
          sbctl --help
      
      - name: Run E2E tests (non-container)
        run: uv run pytest tests/e2e/ -m "e2e and not container" -v